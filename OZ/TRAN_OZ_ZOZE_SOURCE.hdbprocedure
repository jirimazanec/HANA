PROCEDURE "OTEBW_OZ"."OZ::TRAN_OZ_ZOZE_SOURCE" ( ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	 AS
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 
declare exit handler for sqlexception begin
  insert into OTEBW."Log" ("CurrSchema", "CurrObject", "ErrorCode", "ErrorMess") values (::current_object_schema, ::current_object_name, ::sql_error_code, ::sql_error_message);
end;

truncate table "OTEBW_OZ"."ZOZE_SOURCE";
insert into "OTEBW_OZ"."ZOZE_SOURCE" 
select
	MANDT,
	APPL_FORM_ID,
	STATUS,
	SOURCE_ID,
	GENERATION_PLANT,
	PLANT_EAN, 
	CATEGORY,
	OPM_ID,
	REPLACE( SOURCE_NAME, char(32), char(32)) as SOURCE_NAME,
	PRODUCER,
	LICENCE_ID,
	REGION,
	DISTRICT,
	CITY,
	CITY_PART,
	POST_CODE,
	STREET,
	HOUSE_NUM_1,
	HOUSE_NUM_2,
	CADASTRAL_CODE,
	PARCEL_NUMBER,
	LOCATION_DESCR,
	GPS_LATITUDE,
	GPS_LONGITUDE,
	SOURCE_TYPE,
	LIC_PLANT_TYPE,
	POWER,
	VOLTAGE_LEVEL,
	CASE WHEN CHP_EFFICIENCY   = char(32) THEN 0 ELSE TO_INTEGER(CHP_EFFICIENCY) 	END as CHP_EFFICIENCY,
    CASE WHEN INVESTMENT_COSTS = char(32) THEN 0 ELSE TO_DECIMAL(INVESTMENT_COSTS, 10,	2) 	END as INVESTMENT_COSTS,
	CASE WHEN INVESTMENT_PROMO = '0.00' THEN 0 WHEN INVESTMENT_PROMO like '%sda%' THEN 0 WHEN INVESTMENT_PROMO like char(32) THEN 0  WHEN INVESTMENT_PROMO is null THEN 0 ELSE TO_DECIMAL(INVESTMENT_PROMO,	10,	2)  END as INVESTMENT_PROMO,
	CASE WHEN INVESTMENT_GRANT = char(32) THEN 0 ELSE TO_DECIMAL(INVESTMENT_GRANT, 10,	2) 	END as INVESTMENT_GRANT,
	CASE WHEN IRR = char(32) THEN 0 ELSE TO_DECIMAL(IRR, 10,	2) 	END as IRR,
	GRID_ID,
	DSO,
	CONNECTION_TYPE,
	POD_REPORT,
	CHP_FLAG,
	CHP_MOD,
	EXIST_PLANT,
	SPEC_MVER,
	PDS_NOTE,
	OBSERVER,
	CHP_TECH,
	PROMO_CERT,
	PAR_CONNECT_DATE,
	LIC_EFFECT_DATE,
	OPER_START_DATE,
	PROMO_START_DATE,
	PROMO_END_DATE,
	ORIG_CERT_DATE,
	PR_REQ_DATE_FROM,
	PR_REQ_DATE_TO,
	METER_INST_DATE,
	OPER_END_DATE,
	REG_DATE,
	PREFIX,
	ACCOUNT_NUMBER,
	BANK_ID,
	IBAN,
	BANK_BLOCKING,
	BANK_BLOCK_FROM,
	BANK_BLOCK_TO,
	SPEC_PAY,
	EXECUTION,
	ERDAT,
	ERTIM,
	ERNAM,
	AEDAT,
	AETIM,
	AENAM,
	DOCNUM 
from "OTEBW_OZ"."REMOTE_ZOZE_SOURCE";
commit;

insert into "OTEBW"."Log" ( "CurrSchema", "CurrObject", "Cnt", "ErrorMess") values ('OTEBW_OZ', 'ZOZE_SOURCE', ::rowcount, 'Transfer');
commit;
 
END;